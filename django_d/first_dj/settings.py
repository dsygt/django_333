"""
Django settings for first_dj project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from mymiddleware.mymiddleware123 import StatisticsMiddle

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 快速启动开发设置-不适合生产
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# 安全警告:对生产中使用的密匙保密!
SECRET_KEY = 'en1=+46l9sdyik1+xae_3&roijhqz9^0pfl*1($x%*6_1)c_!2'

# 安全警告:不要在生产环境中打开调试
DEBUG = True

# 配置自己的ip地址,
ALLOWED_HOSTS = []

# 这里面安装了哪些app
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 创建一个app后,必须来这里注册
    'app1.apps.App1Config',
    'juheapp.apps.JuheappConfig',

    # 第三方配置,
    # 定时任务ceontab的注册,只能在linux上运行
    # 'django_crontab'
]

# 中间件
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # 导入自定义的middleware
    'mymiddleware.mymiddleware123.StatisticsMiddle'

]

# 图片上传地址??
UPLOAD_PIC_DIR = os.path.join(BASE_DIR, 'resource', 'uploadpic')

# django中设置cookie过期时间
SESSION_COOKIE_AGE = 60 * 10

# 项目起始配置点
ROOT_URLCONF = 'first_dj.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'first_dj.wsgi.application'

# 数据库配置
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     },
#     'slave': {
#         'ENGINE':'django.db.backends.mysql',
#         'NAME':'user_dj',
#         'USER':'root',
#         'PASSWORD':'12345678',
#         'HOST':'127.0.0.1',
#         'PORT':'3306',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'user_dj',
        'USER': 'root',
        'PASSWORD': '12345678',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'OPTIONS': {
            'autocommit': True,
        },
    },
}
# 密码验证
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/


TIME_ZONE = 'Asia/Shanghai'

# 修改数据库时间
LANGUAGE_CODE = 'zh-hans'
# TIME_ZONE = 'Asia/Shanghai'
# TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
# UPLOAD_PIC_DIR
STATIC_URL = 'static/'
STATIC_ROOT_SELF = os.path.join(BASE_DIR, "static").replace('\\', '/')
# print(66666,STATIC_ROOT_SELF)

import os

LOG_DIR = os.path.join(BASE_DIR, 'test_no/')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

LOGGING = {
    'version': 1,

    # 默认的日志功能关闭
    'disable_existing_loggers': True,

    # # 日志格式
    'formatters': {
        'standard': {
            'format': '%(asctime)s [ %(threadName)s : %(thread)d ] '
                      '%(pathname)s : %(funcName)s : %(lineno)d %(levelname)s - %(message)s'
        },
        'myformat': {
            'format': '%(asctime)s'
                      '%(pathname)s : %(funcName)s'
        },
        'statistics': {
            'format': '%(message)s'
        },

    },
    # 过滤器
    'filters': {
        'xxx': {
            # 值:过滤器的路径
            '()': 'test_no.XXXFilter'
        }
    },
    # 处理器
    'handlers': {
        # 输出到控制台(终端处理器)
        'console_handler': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        # 输出到文件
        'file_handler': {
            # 记录到日志文件(需要创建对应的目录，否则会出错)
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            # todo 可能需要修改
            'filename': os.path.join(BASE_DIR, 'test_no/log.log'),
            'maxBytes': 100 * 1024 * 1024,  # 文件大小
            'backupCount': 3,  # 备份份数
            # 'formatter': 'myformat',  # 使用哪种formatters日志格式
            'formatter': 'standard',  # 使用全部的统一format,或者上面的
            'encoding': 'utf-8'
        },
        # 输出到文件
        'statistics_handler': {

            # 记录到日志文件(需要创建对应的目录，否则会出错)
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            # todo 可能需要修改
            'filename': os.path.join(BASE_DIR, 'test_no/statistics.log'),
            'maxBytes': 100 * 1024 * 1024,  # 文件大小
            'backupCount': 1,  # 备份份数
            # 'formatter': 'myformat',  # 使用哪种formatters日志格式
            'formatter': 'statistics',  # 使用全部的统一format,或者上面的
            'encoding': 'utf-8'
        },

    },

    # logging管理器
    'loggers': {
        'django': {
            'handlers': ['console_handler', 'file_handler'],
            'filters': ['xxx'],
            'level': 'DEBUG'
        },
        'statistics': {
            'handlers': ['statistics_handler'],
            'level': 'DEBUG'
        },
    }
}

CACHES = {
    'default': {
        # 1. MemCache
        # 'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        # 'LOCATION': '127.0.0.1:11211',

        # 2. DB Cache
        # 'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        # 'LOCATION': 'my_cache_table',

        # 3. Filesystem Cache
        # 'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        # 'LOCATION': '/var/tmp/django_cache',

        # 4. Local Mem Cache
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'backend-cache'
    }
}

CRONJOBS = [
    # 具体的定时任务
    ('*/2****', 'cron.jobs.demo'),  # 路径要和下面的demo.py路径相同
    ('*/2****', 'echo "xxxx" > /dev/null'),
    ('*/5****', '/bin/ls'),
    ('*/5 * * * *', 'ops.jobs.send_email')

]

# Email config
# QQ邮箱 SMTP 服务器地址
EMAIL_HOST = 'smtp.qq.com'
# 端口  附加码25,465
# EMAIL_PORT = 25
EMAIL_PORT = 465
# 发送邮件的邮箱
EMAIL_HOST_USER = '2210755345@qq.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'fvqfwtrsbddxeaad'
# 开启TLS
EMAIL_USE_TLS = True
# 收件人看到的发件人
EMAIL_FROM = '2210755345@qq.com'
